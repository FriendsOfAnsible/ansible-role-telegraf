#jinja2: newline_sequence:'\r\n'
# BE CAREFUL THIS FILE NEEDS TO BE STORED WITH WINDOWS LINE ENDINGS
# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared plugins.

# Even if a plugin has no configuration, it must be declared in here
# to be active. Declaring a plugin means just specifying the name
# as a section with no variables. To deactivate a plugin, comment
# out the name and any variables.

# Use 'telegraf -config telegraf.toml -test' to see what metrics a config
# file would generate.

# One rule that plugins conform to is wherever a connection string
# can be passed, the values '' and 'localhost' are treated specially.
# They indicate to the plugin to use their own builtin configuration to
# connect to the local system.

# NOTE: The configuration has a few required parameters. They are marked
# with 'required'. Be sure to edit those to make this configuration work.

# Tags can also be specified via a normal map, but only one form at a time:
[tags]
{% if telegraf_tags is defined and telegraf_tags != None %}
{% for key, value in telegraf_tags.iteritems()%}
   {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  interval = "{{ telegraf_agent_interval }}"
  round_interval = {{ telegraf_round_interval }}
  flush_interval = "{{ telegraf_flush_interval }}"
  flush_jitter = "{{ telegraf_flush_jitter }}"

  # Run telegraf in debug mode
  debug = {{ telegraf_debug }}
  
  # Override default hostname, if empty use os.Hostname()
{% if telegraf_hostname is defined and telegraf_hostname != None %}
  hostname = "{{ telegraf_hostname }}"
{% else %}
  hostname = "{{ ansible_hostname }}"
{% endif %}

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################
{% for output in telegraf_outputs %}

[[outputs.{{ output.type }}]]
{% for key, value in output.config.iteritems() %}
{% if value is sequence and value is not string %}
  {{ key }} = [ "{{ value|join('", "') }}" ]
{% else %}
{% if value == "true" or value == "false" or value is number %}
  {{ key }} = {{ value }}
{% else %}
  {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endfor -%}

{% endfor %}

###############################################################################
#                                  PLUGINS                                    #
###############################################################################
{% for input in telegraf_inputs %}

[[inputs.{{ input.type }}]]
{% if input.config is defined %}{% for key, value in input.config.iteritems() %}
{% if value is sequence and value is not string %}
  {{ key }} = [ "{{ value|join('", "') }}" ]
{% else %}
{% if value == "true" or value == "false" or value is number %}
  {{ key }} = {{ value }}
{% else %}
  {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endfor -%}{% endif %}
{% if input.subinputs is defined and input.subinputs is sequence %}{% for sp in input.subinputs %}

   [[inputs.{{ input.type }}.{{ sp.type }}]]
{% if sp.config is defined %}{% for key, value in sp.config.iteritems() %}
{% if value is sequence and value is not string %}
      {{ key }} = [ "{{ value|join('", "') }}" ]
{% else %}
{% if value == "true" or value == "false" or value is number %}
      {{ key }} = {{ value }}
{% else %}
      {{ key }} = "{{ value }}"
{% endif %}
{% endif %}
{% endfor -%}{% endif %}
{% endfor %}{% endif %}
{% endfor %}